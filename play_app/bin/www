#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('play-app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/*
*www 파일은 주로 Express 애플리케이션을 시작하는 진입점(entry point) 파일로 사용됩니다.
* 이 파일은 서버를 시작하고 Express 애플리케이션을 실행하는 역할을 합니다.
* 여기서 server.listen(port); 부분에서 서버를 시작하고 지정된 포트에서 대기합니다. 이때 app 은 Express 애플리케이션입니다.
* www 파일과 app 파일을 분리한 경우, 서버와 데이터베이스 연결이 각각 다른 파일에서 처리됩니다.
* 이 경우, mongoose.connect 는 데이터베이스 연결을 처리하고, app.listen 은 서버를 시작하는 역할을 합니다.
* 서로 다른 파일에서 이루어지기 때문에 각각이 독립적으로 실행될 수 있으며, 이에 따라 각각의 설정이 필요합니다.
* 따라서 서버와 데이터베이스 연결을 다른 포트에서 실행하는 것이 자연스러운 선택입니다.
* */
